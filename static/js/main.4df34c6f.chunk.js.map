{"version":3,"sources":["Calculator.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["rows","calcOperators","calculateExpression","expression","length","str","toEvaluate","replace","test","Error","isNaN","Number","isNumber","slice","evaluate","err","console","error","Calculator","useState","value","setValue","calculate","results","clearValue","className","type","defaultValue","placeholder","disabled","role","map","row","i","onClick","n","concat","toString","c","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRAIMA,EAAO,CAAC,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,IAC1CC,EAAgB,CAAC,IAAK,IAAK,OAAK,QAOzBC,EAAsB,SAACC,GAClC,GAAKA,GAAoC,IAAtBA,EAAWC,OAA9B,CAIA,IARmBC,EAYfC,EAAaH,EAAWI,QAJX,QAI6B,KAAKA,QAHlC,QAGoD,KAErE,IACE,GALmB,OAKFC,KAAKF,GACpB,MAAM,IAAIG,MAAM,wBAWlB,OA1Ba,SAACJ,GAAD,OAAkBK,MAAMC,OAAON,IAkBfO,EAnBZP,EAmBiCC,GAnBZF,OAASC,EAAIA,EAAID,OAAS,GAAK,MAsBnEE,EAAaA,EAAWO,MAAM,GAAI,IAGrBC,YAASR,GAGxB,MAAOS,GAEP,YADAC,QAAQC,MAAMF,MAyDHG,EApDI,WAAO,IAAD,EACGC,mBAAS,IADZ,mBAChBC,EADgB,KACTC,EADS,KAGjBC,EAAY,WAChB,IAAMC,EAAUrB,EAAoBkB,GACpCC,EAASE,IAGLC,EAAa,kBAAMH,EAAS,KAElC,OACE,sBAAKI,UAAU,aAAf,UACE,4CACA,uBACEC,KAAK,OACLC,aAAcP,EACdQ,YAAY,YACZC,UAAQ,IAEV,sBAAKJ,UAAU,+BAAf,UACE,qBAAKK,KAAK,OAAV,SACG9B,EAAK+B,KAAI,SAACC,EAAKC,GACd,OACE,cAAC,WAAD,UACE,sBAAKH,KAAK,MAAV,UACS,IAANG,GAAW,wBAAQC,QAASV,EAAjB,SA7DhB,MA8DKQ,EAAID,KAAI,SAACI,GAAD,OACP,wBAEED,QAAS,kBAAMb,EAASD,EAAMgB,OAAOD,EAAEE,cAFzC,SAIGF,GAHIA,MAMF,IAANF,GAAW,wBAAQC,QAASZ,EAAjB,SAvEZ,UA4DWU,EAAIK,iBAiBzB,qBAAKZ,UAAU,uBAAf,SACGxB,EAAc8B,KAAI,SAACO,GAAD,OACjB,wBAAgBJ,QAAS,kBAAMb,EAASD,EAAMgB,OAAOE,KAArD,SACGA,EAAED,YADQC,eCtEVC,MAVf,WACE,OACE,qBAAKd,UAAU,MAAf,SACE,+BACE,cAAC,EAAD,SCKOe,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4df34c6f.chunk.js","sourcesContent":["import { Fragment, useState } from \"react\";\nimport { evaluate } from \"mathjs\";\nimport \"./Calculator.css\";\n\nconst rows = [[7, 8, 9], [4, 5, 6], [1, 2, 3], [0]];\nconst calcOperators = [\"+\", \"-\", \"×\", \"÷\"];\nconst equalSign = \"=\";\nconst clear = \"C\";\n\nconst getLastChar = (str: string) => (str.length ? str[str.length - 1] : \"\");\nconst isNumber = (str: string) => !isNaN(Number(str));\n\nexport const calculateExpression = (expression: string) => {\n  if (!expression || expression.length === 0) {\n    return;\n  }\n\n  const mulRegex = /×/g;\n  const divRegex = /÷/g;\n  const divideByZero = /\\/0/g;\n\n  let toEvaluate = expression.replace(mulRegex, \"*\").replace(divRegex, \"/\");\n\n  try {\n    if (divideByZero.test(toEvaluate)) {\n      throw new Error(\"Can not divide by 0!\");\n    }\n\n    const lastCharaterIsNumber = isNumber(getLastChar(toEvaluate));\n\n    if (!lastCharaterIsNumber) {\n      toEvaluate = toEvaluate.slice(0, -1);\n    }\n\n    const result = evaluate(toEvaluate);\n\n    return result;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\nconst Calculator = () => {\n  const [value, setValue] = useState(\"\");\n\n  const calculate = () => {\n    const results = calculateExpression(value);\n    setValue(results);\n  };\n\n  const clearValue = () => setValue(\"\");\n\n  return (\n    <div className=\"calculator\">\n      <h1>Calculator</h1>\n      <input\n        type=\"text\"\n        defaultValue={value}\n        placeholder=\"calculate\"\n        disabled\n      />\n      <div className=\"calculator-buttons-container\">\n        <div role=\"grid\">\n          {rows.map((row, i) => {\n            return (\n              <Fragment key={row.toString()}>\n                <div role=\"row\">\n                  {i === 3 && <button onClick={clearValue}>{clear}</button>}\n                  {row.map((n) => (\n                    <button\n                      key={n}\n                      onClick={() => setValue(value.concat(n.toString()))}\n                    >\n                      {n}\n                    </button>\n                  ))}\n                  {i === 3 && <button onClick={calculate}>{equalSign}</button>}\n                </div>\n              </Fragment>\n            );\n          })}\n        </div>\n        <div className=\"calculator-operators\">\n          {calcOperators.map((c) => (\n            <button key={c} onClick={() => setValue(value.concat(c))}>\n              {c.toString()}\n            </button>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Calculator;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Calculator from \"./Calculator\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main>\n        <Calculator />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}